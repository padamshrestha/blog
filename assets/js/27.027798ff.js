(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{891:function(e,s,t){"use strict";t.r(s);var a=t(74),r=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"kusto-query-language-kql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kusto-query-language-kql"}},[e._v("#")]),e._v(" Kusto Query Language (KQL)")]),e._v(" "),t("p",[e._v("Official documentation\n"),t("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query/",target:"_blank",rel:"noopener noreferrer"}},[e._v("KQL Documentation"),t("OutboundLink")],1),e._v("\nCourse\n"),t("a",{attrs:{href:"https://app.pluralsight.com/library/courses/kusto-query-language-kql-from-scratch/table-of-contents",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pluralsight course"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[e._v("what is KQL and where is it used?")]),e._v("\nKQL is an open source language created by Microsoft to query big data sets stored in the Azure cloud. These queries can also be used in alerting rules. Some examples of services/products hosted in Azure that make use of KQL are:")]),e._v(" "),t("ul",[t("li",[e._v("Azure Data Explorer")]),e._v(" "),t("li",[e._v("Log Analytics")]),e._v(" "),t("li",[e._v("Sentinel (this is Microsoft’s cloud SIEM solution that makes use of a Log Analytics workspace as its backend)")]),e._v(" "),t("li",[e._v("Microsoft Defender ATP")])]),e._v(" "),t("p",[e._v("Sample or Demo queries can be tested at\n"),t("a",{attrs:{href:"https://portal.azure.com/#blade/Microsoft_Azure_Monitoring_Logs/DemoLogsBlade",target:"_blank",rel:"noopener noreferrer"}},[e._v("DemoLogs"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"generic"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#generic"}},[e._v("#")]),e._v(" Generic")]),e._v(" "),t("p",[e._v("A string literal with a backslash requires "),t("strong",[e._v("escaping")]),e._v(" by a backslash:\n"),t("code",[e._v('"a string literal with a \\\\ needs to be escaped"')])]),e._v(" "),t("p",[e._v("The same can be achieved using a "),t("strong",[e._v("verbatim string")]),e._v(" literal by putting the @ sign in front: "),t("code",[e._v('@"a verbatim string literal with a \\\\ that does not need to be escaped"')])]),e._v(" "),t("p",[e._v("More info on escaping string data types can be found "),t("a",{attrs:{href:"%5Bhttps://link%5D(https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query/scalar-data-types/string)"}},[e._v("here")]),e._v(".")]),e._v(" "),t("hr"),e._v(" "),t("p",[t("strong",[e._v("Add comments")]),e._v(" to your query with a double forward slash:\n"),t("code",[e._v("// This is a comment")])]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("The where "),t("strong",[e._v("operator and the pipe ( | ) delimiter")]),e._v(" are essential in\nwriting KQL queries.")]),e._v(" "),t("p",[e._v('where is used to filter rows from a table. In this example we filter on events from a source, the table SecurityEvent, where the column Computer is equal to "ContosoAppSrv1", and count the number of results:')]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("SecurityEvent "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" where Computer "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"ContosoAppSrv1"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" count\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v('The pipe is used to separate data transformation operators. Such as:\nwhere Computer == "ContosoAppSrv1". The result can be piped to a new\noperator. For example, to count the number for rows: | count')]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("Only include "),t("strong",[e._v("events from the last 24 hours")]),e._v(" using the ago()\nfunction:")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("T "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" where TimeGenerated "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" ago"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("24h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("For performance reasons always use time filters first in your query. The ago() function supports multiple types of timespans. More info can be found "),t("a",{attrs:{href:"%5Bhttps://link%5D(https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query/scalar-data-types/timespan)"}},[e._v("here")]),e._v(". For example:\n• 1d 1 day\n• 10m 10 minutes\n• 30s 30 seconds")]),e._v(" "),t("hr"),e._v(" "),t("p",[t("strong",[e._v("Select and customize the columns")]),e._v(" from the resulting table of your\nquery with the project operator.")]),e._v(" "),t("p",[e._v("• Specify the "),t("strong",[e._v("columns to include")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("T "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" project TimeGenerated, EventID, Account,\nComputer, LogonType\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("• "),t("strong",[e._v("Rename columns")]),e._v(". In this example we renamed the column\nAccount to UserName:")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("T "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" project TimeGenerated, EventID, UserName "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("\nAccount, Computer, LogonType\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("• "),t("strong",[e._v("Remove columns")]),e._v(" with project-away:")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("T "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" project-away EventSourceName, Task, Level\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("hr"),e._v(" "),t("p",[t("strong",[e._v("Add calculated columns")]),e._v(" to the result using the extend operator:")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("T "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" extend "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("EventAge")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("now"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("-TimeGenerated\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("hr"),e._v(" "),t("p",[t("strong",[e._v("Count the number of records")]),e._v(" using the count operator:")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("T "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" count\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("hr"),e._v(" "),t("p",[t("strong",[e._v("Match based on conditions")]),e._v(" using "),t("a",{attrs:{href:"%5Bhttps://link%5D(https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query/logicaloperators)"}},[e._v("logical operators")]),e._v(" . For example:\n• T | where EventID == 4624 and LogonType == 3\n• T | where EventID == 4624 or EventID == 4625\n• T | where (EventID == 4624 and LogonType == 3) or\nEventID == 4625")]),e._v(" "),t("hr"),e._v(" "),t("p",[t("strong",[e._v("Aggerate results")]),e._v(" from your query with the summarize operator:\n• Aggregate on multiple columns:")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("T "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" summarize by Computer, Account\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("• Aggregate on multiple columns and return the count of the group:")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("T "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" summarize count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" by Computer, Account\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("Besides count() many more very useful aggregation functions exist. An overview can be found "),t("a",{attrs:{href:"%5Bhttps://link%5D(https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query/summarizeoperator#list-of-aggregation-functions)"}},[e._v("here")]),e._v(".")]),e._v(" "),t("hr"),e._v(" "),t("p",[t("strong",[e._v("Sort the rows")]),e._v(" of the result using the sort operator:")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("T "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" where EventID "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4624")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" summarize count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" by\nAuthenticationPackageName "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sort")]),e._v(" by count_\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("By default, rows are sorted in descending order. Sorting in ascending order is also possible:\n• sort by count_ asc\n• Descending order: desc")]),e._v(" "),t("hr"),e._v(" "),t("p",[t("strong",[e._v("Concatenate values")]),e._v(". The result will be a string data type:")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("T "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" project "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("example")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("strcat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("EventID, "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('" - "')]),e._v(", Channel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("A variable number of values can be passed through the strcat function. If values are not a string, they will be forcibly converted to a string.")]),e._v(" "),t("h2",{attrs:{id:"numerical-search"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#numerical-search"}},[e._v("#")]),e._v(" Numerical search")]),e._v(" "),t("p",[t("strong",[e._v("Search for a specific value")]),e._v(": T | where EventID == 4688\n• Not equal to: !=")]),e._v(" "),t("p",[e._v("All of the numerical operators can be found "),t("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query/numoperators",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("Search for a "),t("strong",[e._v("value less or greater than")]),e._v(": T | where EventID ==\n4688 | summarize count() by Process | where count_ < 5\n• Greater: >\n• Less or Equal: <=\n• Greater or Equal: >=")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("Match on "),t("strong",[e._v("multiple numeric values")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("T "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" where EventID "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4624")]),e._v(", "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4625")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("hr"),e._v(" "),t("h2",{attrs:{id:"extract-values"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#extract-values"}},[e._v("#")]),e._v(" Extract values")]),e._v(" "),t("p",[t("strong",[e._v("Extract values from a string or JSON data")]),e._v(". For example, extract the “process name” using a regular expression (if you are less familiar with regular expressions have a look at the split and parse function):")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("SecurityAlert "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" extend "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("_ProcessName")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("extract"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('\'"process\nname": "(.*)"\'')]),e._v(", "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(", ExtendedProperties"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("Because the column ExtendedProperties contains JSON data you can also use the function extractjson():")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("SecurityAlert "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" extend _ProcessName "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("\nextractjson"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$.process name"')]),e._v(", ExtendedProperties"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("If you need to extract multiple elements from JSON data, stored as a string, you can use the function parse_json(). Use the dot notation if the data is of the type dictionary or a list of dictionaries in an array. One way to find out is through the gettype() function. To play with data stored as a dictionary have a look at the help cluster in the "),t("a",{attrs:{href:"https://dataexplorer.azure.com/clusters/help/databases/Samples",target:"_blank",rel:"noopener noreferrer"}},[e._v("Azure Data\nExplorer"),t("OutboundLink")],1),e._v(" (table: StormEvents, column: StormSummary).")]),e._v(" "),t("h2",{attrs:{id:"string-search"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-search"}},[e._v("#")]),e._v(" String search")]),e._v(" "),t("p",[t("strong",[e._v("Search across all tables and columns")]),e._v(': search "'),t("em",[e._v("KEYWORD")]),e._v('"\n• Keep in mind that this is a performance intensive operation.')]),e._v(" "),t("hr"),e._v(" "),t("p",[t("strong",[e._v("Search for a specific value")]),e._v(': T | where ProcessName ==\n@"C:\\Windows\\System32\\regsvr32.exe"')]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("A "),t("strong",[e._v("not equal to match")]),e._v(" is done by adding an exclamation mark\nas prefix:\n• Equal to: ==\n• Not equal to: !=\nThis is also supported in a similar way for other "),t("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query/datatypes-string-operators",target:"_blank",rel:"noopener noreferrer"}},[e._v("string operators"),t("OutboundLink")],1)]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("A "),t("strong",[e._v("case insensitive match")]),e._v(" can be achieved using a tilde:\n• Case sensitive: ==\n• Case insensitive: =~\n• Case insensitive and not equal to: !~\nThis is also supported in a similar way for other "),t("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query/datatypes-string-operators",target:"_blank",rel:"noopener noreferrer"}},[e._v("string operators"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("Match on values that "),t("strong",[e._v("contain a specific string")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("T "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" where CommandLine contains "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"guest"')]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v('Because has is more performant, it’s advised to use has over contains\nwhen searching for full keywords. The following expression yields to true:\n• "North America" has "america"')]),e._v(" "),t("p",[e._v("contains and has are case insensitive by default. A case sensitive match\ncan be achieved by adding the suffix _cs: contains_cs / has_cs")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("Match on values "),t("strong",[e._v("starting with or ending with a specific string")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("T "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" where Computer startswith "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"contoso"')]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("• Ending with a specific string: endswith")]),e._v(" "),t("p",[e._v("startswith and endswith are case insensitive by default. A case sensitive\nmatch can be achieved by adding the suffix _cs: startswith_cs /\nendswith_cs")]),e._v(" "),t("hr"),e._v(" "),t("p",[t("strong",[e._v("Match on multiple string values")]),e._v(': T | where Computer in\n("ContosoAppSrv1", "ContosoSQLSrv1")\n• Not equal to: !in\n• Case insensitive: in~\n• Case insensitive and not equal to: !in~')]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("Match based on a "),t("strong",[e._v("regular expression")]),e._v(': T | where Computer\nmatches regex "^Contoso.*"\n• KQL uses the re2 library and also complies with that syntax.\nTroubleshooting your regex can be done on regex101.com. Select\nthe regex Flavor “Golang” which also makes use of re2.')]),e._v(" "),t("p",[e._v("A "),t("strong",[e._v("not equal to match")]),e._v(" can be done using the not() function:")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("T "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" where not"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("Computer matches regex "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"^Contoso.*"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("A "),t("strong",[e._v("case insensitive match")]),e._v(" can be achieved by providing the i flag:")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("T "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" where Computer matches regex "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"(?i)^contoso.*"')]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h2",{attrs:{id:"named-expressions-and-user-defined-functions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#named-expressions-and-user-defined-functions"}},[e._v("#")]),e._v(" Named expressions and user-defined functions")]),e._v(" "),t("p",[e._v("Use the let statement to "),t("strong",[e._v("bind names to expressions")]),e._v(". See below two examples of a named expression. Of course, much more complex expression can be created. Such as complete queries that can be nested inside another query (i.e. sub-query). For "),t("strong",[e._v("sub-queries")]),e._v(" consider the use of the materialize() function when the sub-query is called multiple times.")]),e._v(" "),t("p",[e._v("Take into account the semicolon at the end of the let statement:")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("let")]),e._v(" _SearchWindow "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" ago"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("24h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\nT "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" where TimeGenerated "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" _SearchWindow\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("let")]),e._v(" _computers "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" dynamic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"ContosoAppSrv1"')]),e._v(",\n"),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"ContosoSQLSrv1"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\nT "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" where Computer "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("_computers"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("p",[e._v("The let statement can be used in many other useful ways. Such as to create "),t("strong",[e._v("user-defined functions")]),e._v(". More info on the let statement can be found "),t("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query/letstatement",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"visualizations"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#visualizations"}},[e._v("#")]),e._v(" Visualizations")]),e._v(" "),t("p",[e._v("The render operator can be used to create visualizations. Besides the below example, more types of visualizations are possible. More info can be found "),t("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query/renderoperator?pivots=azuredataexplorer",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),t("OutboundLink")],1),e._v(". (Pie charts are not the most telling graphics, but the support for the render operator is limited on the demo environment.)")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("SecurityAlert "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("\nsummarize "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("Count")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" by "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("Alert")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("strcat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("DisplayName,\n"),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('" ("')]),e._v(", toupper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("AlertSeverity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('")"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sort")]),e._v(" by Count "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" render piechart\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("h2",{attrs:{id:"join-tables"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#join-tables"}},[e._v("#")]),e._v(" Join tables")]),e._v(" "),t("p",[e._v("KQL has the ability to join tables. In this example, we join some of the events in the SecurityAlert table with process creation events (event ID 4688) from the SecurityEvent table. More information on joining tables can be found "),t("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query/joinoperator?pivots=azuredataexplorer",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("This query serves purely as an example to explain the join operator because all\nprocess data is contained within the column Entities of the SecurityAlert table")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("SecurityAlert "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("\nextend _ProcessId "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" extractjson"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$.process id"')]),e._v(",\nExtendedProperties"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(",\n_ProcessCommandLine "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" tolower"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("extractjson"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$.command\nline"')]),e._v(", ExtendedProperties"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("))")]),e._v(",\n_HostName "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" tolower"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("extractjson"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$[0].HostName"')]),e._v(",\nEntities"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("))")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("join")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("kind")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("inner "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n SecurityEvent\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" where EventID "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4688")]),e._v("\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" extend "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("_HostName")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("tolower"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("Computer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" extend "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("_ProcessCommandLine")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("tolower"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("CommandLine"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" on "),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$left")]),e._v("._ProcessId "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$right")]),e._v(".NewProcessId,\n_HostName, _ProcessCommandLine\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br")])])])}),[],!1,null,null,null);s.default=r.exports}}]);