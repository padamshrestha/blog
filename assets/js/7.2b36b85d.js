(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{865:function(t,e,o){t.exports=o.p+"assets/img/docker1.abdfabe9.png"},866:function(t,e,o){t.exports=o.p+"assets/img/docker2.05d73d11.png"},867:function(t,e,o){t.exports=o.p+"assets/img/docker3.f0c9d3b9.png"},868:function(t,e,o){t.exports=o.p+"assets/img/docker4.a0fcfb91.png"},909:function(t,e,o){"use strict";o.r(e);var r=o(74),n=Object(r.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"installing-and-running-docker-in-wsl-with-vs-code"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#installing-and-running-docker-in-wsl-with-vs-code"}},[t._v("#")]),t._v(" Installing and Running Docker in WSL with VS Code")]),t._v(" "),r("p",[r("a",{attrs:{href:"%5Bhttps://link%5D(https://docs.microsoft.com/en-us/windows/wsl/about)"}},[t._v("WSL")]),t._v(" is much more integration and user friendly.")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://docs.docker.com/docker-for-windows/wsl/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Install Docker"),r("OutboundLink")],1)]),t._v(" "),r("h3",{attrs:{id:"docker-settings"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker-settings"}},[t._v("#")]),t._v(" Docker Settings:")]),t._v(" "),r("p",[r("img",{attrs:{src:o(865),alt:"Docker"}}),t._v(" "),r("img",{attrs:{src:o(866),alt:"Docker"}})]),t._v(" "),r("h3",{attrs:{id:"run-docker-from-wsl-linux"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#run-docker-from-wsl-linux"}},[t._v("#")]),t._v(" Run docker from WSL Linux")]),t._v(" "),r("p",[r("img",{attrs:{src:o(867),alt:"Docker"}})]),t._v(" "),r("h3",{attrs:{id:"connect-to-container-via-vs-code"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#connect-to-container-via-vs-code"}},[t._v("#")]),t._v(" Connect to container via VS Code")]),t._v(" "),r("p",[r("img",{attrs:{src:o(868),alt:"Docker"}})]),t._v(" "),r("h2",{attrs:{id:"commands"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#commands"}},[t._v("#")]),t._v(" Commands")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("Command")]),t._v(" "),r("th",[t._v("Description")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("docker ps")]),t._v(" "),r("td",[t._v("List all containers")])]),t._v(" "),r("tr",[r("td",[t._v("docker ps -a")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("docker stop id")]),t._v(" "),r("td",[t._v("for id first num or char should be enough if no duplicate")])]),t._v(" "),r("tr",[r("td",[t._v("docker rm id")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("docker images")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("docker rmi id")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("docker inspect containerName")]),t._v(" "),r("td",[t._v("Give all the details about the container")])]),t._v(" "),r("tr",[r("td",[t._v("docker rm –v id")]),t._v(" "),r("td",[t._v("Remove container and volume")])]),t._v(" "),r("tr",[r("td"),t._v(" "),r("td")])])]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("Command")]),t._v(" "),r("th",[t._v("Description")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("docker-compose build")]),t._v(" "),r("td",[t._v("Build or rebuild services defined in docker-compose.yml "),r("br"),t._v(" One off command (only mongo) docker-compose build mongo")])]),t._v(" "),r("tr",[r("td",[t._v("docker-compose up")]),t._v(" "),r("td",[t._v("Create and start the containers "),r("br"),t._v(" docker-compose up –no-deps node "),r("br"),t._v(" --no-deps: Do not recreate services that node depends on node: "),r("br"),t._v("Rebuild node image and stop, destroy and recreate only node "),r("br"),t._v(" docker-compose up –d : in daemon mode, so it won’t block the console")])]),t._v(" "),r("tr",[r("td",[t._v("docker-compose down")]),t._v(" "),r("td",[t._v("down: Take all of the containers down (stop and remove) "),r("br"),t._v("docker-compose down –rmi all –volumes --rmi "),r("br"),t._v(":Remove all images --volumes: Remove all volumes")])]),t._v(" "),r("tr",[r("td",[t._v("docker-compose logs")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("docker-compose ps")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("docker-compose stop")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("docker-compose start")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("docker-compose rm")]),t._v(" "),r("td")])])]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("Command")]),t._v(" "),r("th",[t._v("Description")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("docker rm $(docker ps -a -q)")]),t._v(" "),r("td",[t._v("Delete all containers")])]),t._v(" "),r("tr",[r("td",[t._v("docker rmi $(docker images -q)")]),t._v(" "),r("td",[t._v("Delete all images")])]),t._v(" "),r("tr",[r("td",[t._v("docker rm –f $(docker ps –a -q)")]),t._v(" "),r("td",[t._v("Remove all containers "),r("br"),t._v(" -f: force "),r("br"),t._v(" -q: quite")])]),t._v(" "),r("tr",[r("td",[t._v("docker rmi -f $( docker images -q dangling=true)")]),t._v(" "),r("td",[t._v("docker rmi -f $( docker images -q)")])])])]),t._v(" "),r("p",[t._v("Example\ndocker pull kitematic/hello-world-nginx")]),t._v(" "),r("p",[t._v("docker run –p 80:80 kitematic/hello-world-nginx\nWith part mapping - 80 image port to 80 container port")]),t._v(" "),r("p",[t._v("docker run  -p 8080:3000 –v /var/www node\nwhere –v creates volume and /var/www is container volume on host. We can check about the location of container volume using command")]),t._v(" "),r("p",[t._v("We can customize the volume location rather than default.\ndocker run  -p 8080:3000 –v $(pwd) /var/www node\nwhere $(pwd) is from current working directory used as host location  (or host mount)\n8080: external or image port\n3000: default port the express generated so we need to use that as internal port\n-v: create volume\n$(pwd): Create volume that point source code in current directory\n/var/www: volume inside the container that points to current directory\n-w: make “/var/www” as working directory or context to run commands")])])}),[],!1,null,null,null);e.default=n.exports}}]);